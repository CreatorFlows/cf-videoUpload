// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/videoUpload.proto

package cf_videoUpload

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoUploadService_Upload_FullMethodName = "/VideoUploadService/Upload"
)

// VideoUploadServiceClient is the client API for VideoUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoUploadServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoUploadRequest, VideoUploadResponse], error)
}

type videoUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoUploadServiceClient(cc grpc.ClientConnInterface) VideoUploadServiceClient {
	return &videoUploadServiceClient{cc}
}

func (c *videoUploadServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoUploadRequest, VideoUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoUploadService_ServiceDesc.Streams[0], VideoUploadService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoUploadRequest, VideoUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoUploadService_UploadClient = grpc.ClientStreamingClient[VideoUploadRequest, VideoUploadResponse]

// VideoUploadServiceServer is the server API for VideoUploadService service.
// All implementations must embed UnimplementedVideoUploadServiceServer
// for forward compatibility.
type VideoUploadServiceServer interface {
	Upload(grpc.ClientStreamingServer[VideoUploadRequest, VideoUploadResponse]) error
	mustEmbedUnimplementedVideoUploadServiceServer()
}

// UnimplementedVideoUploadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoUploadServiceServer struct{}

func (UnimplementedVideoUploadServiceServer) Upload(grpc.ClientStreamingServer[VideoUploadRequest, VideoUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedVideoUploadServiceServer) mustEmbedUnimplementedVideoUploadServiceServer() {}
func (UnimplementedVideoUploadServiceServer) testEmbeddedByValue()                            {}

// UnsafeVideoUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoUploadServiceServer will
// result in compilation errors.
type UnsafeVideoUploadServiceServer interface {
	mustEmbedUnimplementedVideoUploadServiceServer()
}

func RegisterVideoUploadServiceServer(s grpc.ServiceRegistrar, srv VideoUploadServiceServer) {
	// If the following call pancis, it indicates UnimplementedVideoUploadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoUploadService_ServiceDesc, srv)
}

func _VideoUploadService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoUploadServiceServer).Upload(&grpc.GenericServerStream[VideoUploadRequest, VideoUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VideoUploadService_UploadServer = grpc.ClientStreamingServer[VideoUploadRequest, VideoUploadResponse]

// VideoUploadService_ServiceDesc is the grpc.ServiceDesc for VideoUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoUploadService",
	HandlerType: (*VideoUploadServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _VideoUploadService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/videoUpload.proto",
}
